*to write inline javascript code write like this anywhere in your html file
<script>
        console.log('Hello World! from inline code.');
    </script>


*to make an external js file 
	<script src="script.js">
	</script>
where script.js is the name of the external js file. If we will write code inside script tag then this code will not get executed, code which is in that file will only get executed. If that file is in that particular folder then only fileName is sufficient but if file is in another folder then we need to write complete path.


*Primitive JS data types
-Number: Floating point numbers, for decimals and integers. var age = 34;
-String: Sequence of characters, used for text.  var name = 'Aman';
-Boolean: Logical data type that can only be true or false. var eligible = true;
-Undefined: Datatype of a variable that does not have a value yet. var designation;
-Null: also means 'non-existent'

*starting a variable name with $ or _ sign is ok.


*alert('this is an alert');
This is way to give a alert on the browser window.


*var lastName = prompt('What is your last name?');
This will open a prompt on the browser window and that prompt will have option to submit the text entered.


*typeof = tells the data type of the variable.
console.log(typeof eligible);//o/p= boolean


*operator precedence table is at:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence


*var x, y;
x = y = 2 + 4;
console.log(x, y);//o/p = 6 6
bcz = has right to left associativity and + has more precedence
so 2+4 will be 6 and 6 will be assigned to y and then x will be equal to y which is 6
So both will be 6


*switch can contain string in the case and also the logical expressions (age>13 && age<20).


*falsy values: undefined, null, 0, '', NaN. (these values indicates false if checked in if statement)


*=== is a strict equality operator
== can do type coersion
23 == '23'  : true (automatic type coersion from string to integer)
23 === '23' : false (strict)


*an expression is something which returns us a single value
eg: 1) typeof 23 returns 'number'
2) function age(yearBorn){
	//age calculated and stored in johnAge
	return johnAge;
   }
returns an age.


*whereas statement doesnt return anything. eg. if statement


*declaration of an array
var names = ['John', 'Mark', 'Jane'];
var years = new Array(1990, 1969, 1948);
*to get the whole array just write array's name
*to get its length, arrayName.length
*to get an element at index position 2, arrayName[2]

*similarly we can add elements of different datatypes in an array.

*to add an element at the last of the array, arrayName.push(element)

*to add an element at the beginning of the array, arrayName.unshift(element)

*to delete an element from the end, arrayName.pop();

*to delete an element from the beginning, arrayName.shift();

*to get the position of an element from the array, arrayName.indexof(element);//it will tell you the position according to 0 indexed array

*if passed element is not there in the array then it will return -1.


*Object: its just like the array, the difference is that we can access its elements with keys. So basically elements are kept as a key value pairs.
This way is called object literal
var objJohn = {
	firstName: 'John',
	lastName: 'Smith',
	birthYear: 1990,
	family: ['Jane', 'Mark', 'Bob', 'Emily'],
	job: 'teacher',
	isMarried: false
};

*to access whole object, use objName. (eg. objJohn)

*to particular element, use objName.key. (eg. objJohn.job, objJohn['job'], var x='firstName'; objJohn[x])

*we can normally mutate any value of the object. (eg. objJohn.job = 'designer') Just the same way, how we access an element, we can also assign a different value.

*another way of creating an object
var objJane = new Object();
objJane.firstName = 'Jane'; and so on we can give different key-values
This is called new object syntax


*we can also add a function expression in the object.
var objJohn = {
	firstName: 'John',
	lastName: 'Smith',
	birthYear: 1990,
	family: ['Jane', 'Mark', 'Bob', 'Emily'],
	job: 'teacher',
	isMarried: false
	calcAge: function(birthYear){
		return 2020 - birthYear;
	}
};
To access it, we write objJohn.calcAge(1990);

*or we can access the same property inside the function, just like
calcAge: function(){
	return 2020 - this.birthYear;
}


*we can use a function before its declared bcz all the function declarations in a code runs before the execution of the complete code. So system knows that a particular function exists later in the code. This concept is called hoisting.

For eg:
calculateAge(1998);//o/p: 22
/*more code*/
function calculateAge(year){
    console.log(2020 - year);
}

But this won't work in function expressions

For eg:
retirement(1998);//this will give error
var retirement = function(year){
	console.log(60 - (2020 - year));
}

At the time of execution phase of the variable object, variable declarations and function declarations are read before the execution of the code and then variables are set to undefined. Because of this reason, if we will use a variable before declaring and defining it, system will show that variable as undefined. As system has just read its declaration.

console.log(age);//undefined
var age = 22;
console.log(age);//22

If we will not even declare or define that variable in the entire code then system will show an error.

console.log(age);//Uncaught ReferenceError: age is not defined


*var a = 'Hello! ';
first();

function first() {
    var b = 'Hi! ';
    second();

    function second() {
        var c = 'Hey!';
        console.log(a + b + c);//Hello! Hi! Hey!
    }
}
whereas
var a = 'Hello! ';
first();

function first() {
    var b = 'Hi! ';
    second();

    function second() {
        var c = 'Hey!';
        console.log(a + b + c);//undefinedHi! Hey!
        var a = 'Bhak';
    }
}


*'this' points to window's object everywhere except inside the object. Inside an object, if 'this' is accessed then it will point to the object. Still if 'this' is accessed inside the function which is inside the object, this will point to window's object.


*method borrowing: if we want one object's method to be same as the other object's method then we borrow another object's method.
mike.calculateAge = john.calculateAge; //where calculateAge is defined in john object and at this line mike will also have the method named calculate age and will be same as john's calculateAge method.


*DOM: (Document Object Model) is a structured representation of an html document. The DOM is used to connect to scripts like JS. For each html box, there is an object in the DOM that we can access and interact with.